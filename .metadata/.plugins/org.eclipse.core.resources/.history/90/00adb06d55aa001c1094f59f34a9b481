/***************************************************************************//**
 * @file
 * @brief app_init.c
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

// -----------------------------------------------------------------------------
//                                   Includes
// -----------------------------------------------------------------------------
#include "app_log.h"
#include "sl_app_common.h"
#include "sl_si70xx.h"
#include "sl_i2cspm_instances.h"
#include "sl_sleeptimer.h"
#include "app_process.h"
#include "app_framework_common.h"
#include "em_cmu.h"
#include "em_iadc.h"
#include "em_prs.h"
// -----------------------------------------------------------------------------
//                              Macros and Typedefs
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                          Static Function Declarations
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                                Global Variables
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                                Static Variables
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                          Public Function Definitions
// -----------------------------------------------------------------------------
/******************************************************************************
* Application framework init callback
******************************************************************************/
void emberAfInitCallback(void)
{
  EmberStatus status;
  uint8_t device_id = 0;
  // init temperature sensor

  emberAfAllocateEvent(&report_control, &report_handler);
  // CLI info message
  app_log_info("\nSensor\n");

    // Enable ADC clock
    CMU_ClockEnable(cmuClock_IADC0, true);

    /* Base the ADC configuration on the default setup. */
    IADC_Init_t       init  = IADC_INIT_DEFAULT;
    IADC_InitSingle_t sInit = IADC_INITSINGLE_DEFAULT;
    // Set the prescaler based on the incoming IADC module clock
    init.srcClkPrescale = IADC_calcSrcClkPrescale(IADC0, 1000000, 0);
    sInit.triggerAction = iadcTriggerActionOnce;
    sInit.triggerSelect = iadcTriggerSelPrs0PosEdge;
    sInit.dataValidLevel = _IADC_SINGLEFIFOCFG_DVL_VALID1;   // Request LDMA service when one entry is in the FIFO
    sInit.start = true;
    sInit.fifoDmaWakeup = true;    // Run in EM2
    // Modify configuration 0
    IADC_AllConfigs_t allConfigs = IADC_ALLCONFIGS_DEFAULT;
    allConfigs.configs[0].reference = iadcCfgReferenceVddx;
    /*
     * Determine the prescale value for CLK_SRC_ADC to set the ADC_CLK
     * frequency.  This will be 1 since the HFRCOEM23 provides the IADC
     * module clock (CLK_CMU_ADC), and it has been switched to operate
     * in the 1 MHz tuning band.
     *
     * In this example, at the default oversampling rate (OSR) of 2x....
     *
     * Conversion Time = ((4 * OSR) + 2) / fCLK_ADC = ((4 * 2) + 2) / 1 MHz = 10 Âµs
     */
    allConfigs.configs[0].adcClkPrescale = IADC_calcAdcClkPrescale(IADC0,
                                                                   1000000,
                                                                   0,
                                                                   iadcCfgModeNormal,
                                                                   init.srcClkPrescale);
    // Initialize IADC
    // Modify the default single-ended input configuration
     IADC_SingleInput_t seInput= IADC_SINGLEINPUT_DEFAULT;

     seInput.posInput = iadcPosInputDvdd;
     seInput.negInput = iadcNegInputGnd;
    IADC_init(IADC0, &init, &allConfigs);
    IADC_initSingle(IADC0, &sInit, &seInput);
    IADC_enableInt(IADC0, IADC_IF_SINGLECMP);
    NVIC_EnableIRQ(IADC_IRQn);

  status = emberNetworkInit();
  app_log_info("Network status 0x%02X\n", status);
  emberResetNetworkState();
  status = emberSetSecurityKey(&security_key);
  app_log_info("Network status 0x%02X\n", status);

  EmberNetworkParameters parameters;
MEMSET(&parameters, 0, sizeof(EmberNetworkParameters));
parameters.radioTxPower = 0;
parameters.radioChannel = 11;
parameters.panId = 0x01FF;
status = emberJoinNetwork(EMBER_STAR_SLEEPY_END_DEVICE, &parameters);
app_log_info("Network status 0x%02X\n", status);
#if defined(EMBER_AF_PLUGIN_BLE)
  bleConnectionInfoTableInit();
#endif
  emberAfPluginPollEnableShortPolling(true);

  PRS_SourceAsyncSignalSet(10, PRS_ASYNC_CH_CTRL_SOURCESEL_MODEMH, PRS_ASYNC_CH_CTRL_SIGSEL_MODEMHSYNCSENT);
  sl_power_manager_remove_em_requirement(SL_POWER_MANAGER_EM1);
       sl_power_manager_add_em_requirement(SL_POWER_MANAGER_EM2);



}
// -----------------------------------------------------------------------------
//                          Static Function Definitions
// -----------------------------------------------------------------------------
