#include PLATFORM_HEADER
#include "stack/include/ember.h"
#include "hal/hal.h"
#include "em_chip.h"
#include "app_log.h"
#include "sl_si70xx.h"
#include "sl_i2cspm_instances.h"
#include "poll.h"
#include "em_iadc.h"
#include "em_cmu.h"
#include "em_emu.h"
#include "em_burtc.h"
#include "em_acmp.h"
#include "sl_app_common.h"
#include "app_process.h"
#include "app_framework_common.h"
#include "app_process.h"
#include "sl_simple_led_instances.h"
#if defined(SL_CATALOG_KERNEL_PRESENT)
#include "sl_component_catalog.h"
#include "sl_power_manager.h"
#endif

void applicationSensorTxInit(void)
{

}


void applicationSensorTxStartEvent(void)
{

}


void applicationSensorTxEndEvent(void)
{
  uint8_t buffer[4];
  buffer[0] = 0xFF & (uint8_t) WARN;
  buffer[1] = 0xFF & (uint8_t) 0;
  buffer[2] = 0xFF & (uint8_t) selfInfo.trigd;
  buffer[3] = 0xFF & (uint8_t) selfInfo.state;
  emberMessageSend (selfInfo.central_id,
  SENSOR_SINK_ENDPOINT, // endpoint
                    0, // messageTag
                    sizeof(buffer), buffer, tx_options);
}


void applicationSensorTxRoutine(void)
{
  uint8_t buffer[6];
  buffer[0] = 0xFF & (uint8_t) REPORT;
  buffer[1] = 0xFF & (uint8_t) (selfInfo.battery_voltage >> 24);
  buffer[2] = 0xFF & (uint8_t) (selfInfo.battery_voltage >> 16);
  buffer[3] = 0xFF & (uint8_t) (selfInfo.battery_voltage >> 8);
  buffer[4] = 0xFF & (uint8_t) (selfInfo.battery_voltage);
  buffer[5] = 0xFF & (uint8_t) selfInfo.state;
  emberMessageSend (selfInfo.central_id,
  SENSOR_SINK_ENDPOINT, // endpoint
                    0, // messageTag
                    sizeof(buffer), buffer, tx_options);
}

void applicationSensorTxReply(void)
{

}

void applicationSensorRxMsg(EmberIncomingMessage *message)
{
  uint8_t i;
  if ((message->endpoint == selfInfo.endpoint)
      || (message->source == selfInfo.central_id))
    {
      app_log_info("RX: Data from 0x%04X:", message->source);
      if (message->payload[0] == REQUEST)
        {
          if (message->payload[1] == (uint8_t) ACTIVE)
            {
              selfInfo.state = ACTIVE;
              NVIC_ClearPendingIRQ (GPIO_ODD_IRQn);
              NVIC_EnableIRQ (GPIO_ODD_IRQn);

            }
          else if (message->payload[1] == (uint8_t) INACTIVE)
            {
              selfInfo.state = INACTIVE;
              NVIC_ClearPendingIRQ (GPIO_ODD_IRQn);
              NVIC_DisableIRQ (GPIO_ODD_IRQn);
            }
          uint8_t buffer[3];
          buffer[0] = 0xFF & (uint8_t) REPLY;
          buffer[1] = 0xFF
              & (uint8_t) ((bool) (message->payload[1]
                  != (uint8_t) selfInfo.state));
          buffer[2] = 0xFF & (uint8_t) selfInfo.state;
          emberMessageSend (selfInfo.central_id,
          SENSOR_SINK_ENDPOINT, // endpoint
                            0, // messageTag
                            sizeof(buffer), buffer, tx_options);
        }
      else if (message->payload[0] == SYNC)
        {

        }

      for (i = SENSOR_SINK_DATA_OFFSET; i < message->length; i++)
        {
          app_log_info(" %x", message->payload[i]);
        }
      app_log_info("\n");
    }
}
