/***************************************************************************//**
 * @file
 * @brief app_process.c
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

// -----------------------------------------------------------------------------
//                                   Includes
// -----------------------------------------------------------------------------
#include "app_framework_common.h"
// -----------------------------------------------------------------------------
//                              Macros and Typedefs
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                          Static Function Declarations
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                                Global Variables
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                                Static Variables
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                          Public Function Definitions
// -----------------------------------------------------------------------------
/******************************************************************************
 * Application state machine, called infinitely
 *****************************************************************************/
void GPIO_ODD_IRQHandler(void)
{
  // Get and clear all pending GPIO interrupts
  uint32_t interruptMask = GPIO_IntGet ();
  //GPIO_IntClear(interruptMask);
  GPIO_IntClear (GPIO_IntGet ());
app_log_info("clock: %d: ", SystemFSRCOClockGet());
  // Check if button 1 was pressed
  if (interruptMask & (1 << 5))
    {

      app_log_info("trigd");

      /*
       CMU_ClockSelectSet (cmuClock_EM4GRPACLK, cmuSelect_ULFRCO);
       CMU_ClockEnable (cmuClock_BURTC, true);
       CMU_ClockEnable (cmuClock_BURAM, true);

       BURTC_Init_TypeDef burtcInit = BURTC_INIT_DEFAULT;
       burtcInit.compare0Top = true; // reset counter when counter reaches compare value
       burtcInit.em4comp = true; // BURTC compare interrupt wakes from EM4 (causes reset)
       BURTC_Init (&burtcInit);
       BURTC_CounterReset ();
       BURTC_CompareSet (0, 2600);
       BURTC_IntEnable (BURTC_IEN_COMP);    // compare match
       NVIC_EnableIRQ (BURTC_IRQn);
       BURTC_Enable (true);*/
    }

}


void emberAfTickCallback(void)
{
  ///////////////////////////////////////////////////////////////////////////
  // Put your application code here!                                       //
  // This is called infinitely.                                            //
  // Do not call blocking functions from here!                             //
  ///////////////////////////////////////////////////////////////////////////
}

// -----------------------------------------------------------------------------
//                          Static Function Definitions
// -----------------------------------------------------------------------------
