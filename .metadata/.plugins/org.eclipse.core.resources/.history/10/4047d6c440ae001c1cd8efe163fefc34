/***************************************************************************//**
 * @file
 * @brief app_init.c
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

// -----------------------------------------------------------------------------
//                                   Includes
// -----------------------------------------------------------------------------
#include "app_log.h"
#include "sl_app_common.h"
#include "sl_si70xx.h"
#include "sl_i2cspm_instances.h"
#include "sl_sleeptimer.h"
#include "app_process.h"
#include "app_framework_common.h"
#include "em_iadc.h"
#include "em_cmu.h"
#include "em_emu.h"
#include "em_prs.h"
#include "em_lesense.h"
#include "em_acmp.h"
#include "sl_simple_led_instances.h"
// -----------------------------------------------------------------------------
//                              Macros and Typedefs
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                          Static Function Declarations
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                                Global Variables
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                                Static Variables
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                          Public Function Definitions
// -----------------------------------------------------------------------------
/******************************************************************************
 * Application framework init callback
 ******************************************************************************/
void emberAfInitCallback (void)
{
  EmberStatus status;
  emberAfAllocateEvent (&report_control, &report_handler);
  // CLI info message
  app_log_info("\nSensor\n");
  emberResetNetworkState ();
  while(status != EMBER_SUCCESS)
    {
      sl_sleeptimer_delay_millisecond(500);
      status = emberNetworkInit();
    }
  app_log_info("Network status 0x%02X\n", status);

  status = emberSetSecurityKey (&security_key);
  app_log_info("Network status 0x%02X\n", status);

  EmberNetworkParameters parameters;
  MEMSET(&parameters, 0, sizeof(EmberNetworkParameters));
  parameters.radioTxPower = 0;
  parameters.radioChannel = 11;
  parameters.panId = 0x01FF;
  status = emberJoinNetwork(EMBER_STAR_SLEEPY_END_DEVICE, &parameters);
  app_log_info("Network status 0x%02X\n", status);

  emberAfPluginPollEnableShortPolling (true);
  startBatteryMonitor();
  //startSensorMonitor();
  sl_power_manager_remove_em_requirement (SL_POWER_MANAGER_EM1);
  sl_power_manager_add_em_requirement (SL_POWER_MANAGER_EM2);

}
// -----------------------------------------------------------------------------
//                          Static Function Definitions
// -----------------------------------------------------------------------------

void startBatteryMonitor ()
{
  IADC_Init_t init = IADC_INIT_DEFAULT;
  IADC_AllConfigs_t initAllConfigs = IADC_ALLCONFIGS_DEFAULT;
  IADC_InitSingle_t initSingle = IADC_INITSINGLE_DEFAULT;
  // Single input structure
  IADC_SingleInput_t singleInput = IADC_SINGLEINPUT_DEFAULT;

  CMU_ClockEnable (cmuClock_PRS, true);
  PRS_SourceAsyncSignalSet (0,
  PRS_ASYNC_CH_CTRL_SOURCESEL_MODEM,
                            PRS_MODEMH_PRESENT);
  PRS_ConnectConsumer (0, prsTypeAsync, prsConsumerIADC0_SINGLETRIGGER);
  CMU_ClockEnable (cmuClock_IADC0, true);
  initAllConfigs.configs[0].reference = iadcCfgReferenceInt1V2;
  initAllConfigs.configs[0].vRef = 1200;
  initAllConfigs.configs[0].osrHighSpeed = iadcCfgOsrHighSpeed2x;

  initAllConfigs.configs[0].adcClkPrescale = IADC_calcAdcClkPrescale (
      IADC0, 1000000, 0, iadcCfgModeNormal, init.srcClkPrescale);
  initSingle.triggerSelect = iadcTriggerSelPrs0PosEdge;
  initSingle.dataValidLevel = iadcFifoCfgDvl4;
  initSingle.start = true;
  singleInput.posInput = iadcPosInputAvdd;
  singleInput.negInput = iadcNegInputGnd;
  IADC_init (IADC0, &init, &initAllConfigs);
  IADC_initSingle (IADC0, &initSingle, &singleInput);
  IADC_clearInt (IADC0, _IADC_IF_MASK);
  IADC_enableInt (IADC0, IADC_IEN_SINGLEDONE);
  NVIC_ClearPendingIRQ (IADC_IRQn);
  NVIC_EnableIRQ (IADC_IRQn);
}

void startSensorMonitor()
{
  CMU_ClockEnable (cmuClock_GPIO, true);
  CMU_ClockEnable (cmuClock_ACMP0, true);

  // ACMP Configuration
  ACMP_Init_TypeDef initACMP = ACMP_INIT_DEFAULT;

  // Initialize ACMP
  ACMP_Init (ACMP0, &initACMP);

  // Allocate BODD0 to ACMP0 to be able to use the input
  GPIO->BBUSALLOC_SET = GPIO_BBUSALLOC_BODD0_ACMP0;

  // Select 1.25V internal as the reference voltage for ACMP negative input
  ACMP0->INPUTCTRL_SET = ACMP_INPUTCTRL_NEGSEL_VREFDIV1V25;

  // Port B external interface override
  ACMP0->INPUTCTRL_SET = ACMP_INPUTCTRL_POSSEL_EXTPB;

  // Wait for warm-up
  while (!(ACMP0->STATUS && ACMP_IF_ACMPRDY))
    ;
  /*****************************************************************************
   * Set LFRCO as EFM32GRPACLK clock source
   * Enable clock for LESENSE
   * Enable PRS clock as it is needed for LESENSE initialization
   *****************************************************************************/
  CMU_ClockSelectSet (cmuClock_EM23GRPACLK, cmuSelect_LFRCO);
  CMU_ClockEnable (cmuClock_LESENSE, true);
  CMU_ClockEnable (cmuClock_PRS, true);
  // LESENSE default configurations
  LESENSE_Init_TypeDef initLesense = LESENSE_INIT_DEFAULT;
  LESENSE_ChDesc_TypeDef initLesenseCh = LESENSE_CH_CONF_DEFAULT;

  // Do not store scan result and invert ACMP0 to accommodate the PB0 pull-up
  initLesense.coreCtrl.storeScanRes = false;
  initLesense.coreCtrl.invACMP0 = 1;

  // Enable LESENSE control of the ACMP0 positive input mux
  initLesense.perCtrl.acmp0Mode = lesenseACMPModeMux;

  // Channel Configuration
  initLesenseCh.enaScanCh = true;  // Enable scan channel
  initLesenseCh.enaInt = true;     // Enable interrupt
  initLesenseCh.sampleDelay = 0x1; // 1+1 LF Clock cycle sample delay
  initLesenseCh.sampleMode = lesenseSampleModeACMP;
  initLesenseCh.intMode = lesenseSetIntPosEdge;  // Interrupt on sensor posEdge

  //Initialize LESENSE interface
  LESENSE_Init (&initLesense, true);

  // Configure channel 0
  LESENSE_ChannelConfig (&initLesenseCh, 0);

  // 8 Hz scan
  LESENSE_ScanFreqSet (0, 8);

  // Wait for SYNCBUSY clear
  while (LESENSE->SYNCBUSY)
    ;

  // Disable LESENSE, needed in order to configure the offset and internal timer
  LESENSE->EN_CLR = LESENSE_EN_EN;
  while (LESENSE->EN & _LESENSE_EN_DISABLING_MASK)
    ;

  // LESENSE offset 1 = ACMP PB + 1 = ACMP input PB1 which is push button 0
  LESENSE->CH_SET[0].INTERACT = (1 << _LESENSE_CH_INTERACT_OFFSET_SHIFT);
  LESENSE->EN_SET = LESENSE_EN_EN;  // Enable LESENSE
  while (LESENSE->SYNCBUSY)
    ;         // SYNCBUSY check;

  // Enable interrupt in NVIC
  NVIC_ClearPendingIRQ (LESENSE_IRQn);
  NVIC_EnableIRQ (LESENSE_IRQn);

  // Disable PRS clock as it is no longer needed
  CMU_ClockEnable (cmuClock_PRS, false);

  // Start continuous scan
  LESENSE_ScanStart ();
}
