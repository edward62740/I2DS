/***************************************************************************//**
 * @file
 * @brief app_init.c
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

// -----------------------------------------------------------------------------
//                                   Includes
// -----------------------------------------------------------------------------
#include "app_log.h"
#include "sl_app_common.h"
#include "sl_si70xx.h"
#include "sl_i2cspm_instances.h"
#include "sl_sleeptimer.h"
#include "app_process.h"
#include "app_framework_common.h"
#include "em_iadc.h"
#include "em_cmu.h"
#include "em_emu.h"
// -----------------------------------------------------------------------------
//                              Macros and Typedefs
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                          Static Function Declarations
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                                Global Variables
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                                Static Variables
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                          Public Function Definitions
// -----------------------------------------------------------------------------
/******************************************************************************
* Application framework init callback
******************************************************************************/
void emberAfInitCallback(void)
{
  EmberStatus status;

  emberAfAllocateEvent(&report_control, &report_handler);
  // CLI info message
  app_log_info("\nSensor\n");

  status = emberNetworkInit();
  app_log_info("Network status 0x%02X\n", status);
  emberResetNetworkState();
  status = emberSetSecurityKey(&security_key);
  app_log_info("Network status 0x%02X\n", status);

  EmberNetworkParameters parameters;
MEMSET(&parameters, 0, sizeof(EmberNetworkParameters));
parameters.radioTxPower = 0;
parameters.radioChannel = 11;
parameters.panId = 0x01FF;
status = emberJoinNetwork(EMBER_STAR_SLEEPY_END_DEVICE, &parameters);
app_log_info("Network status 0x%02X\n", status);
#if defined(EMBER_AF_PLUGIN_BLE)
  bleConnectionInfoTableInit();
#endif
  emberAfPluginPollEnableShortPolling(true);

  IADC_Init_t init = IADC_INIT_DEFAULT;
   IADC_AllConfigs_t initAllConfigs = IADC_ALLCONFIGS_DEFAULT;
   IADC_InitSingle_t initSingle = IADC_INITSINGLE_DEFAULT;

   // Single input structure
   IADC_SingleInput_t singleInput = IADC_SINGLEINPUT_DEFAULT;

   /*
    * Enable IADC0 and GPIO register clock.
    *
    * Note: On EFR32xG21 devices, CMU_ClockEnable() calls have no effect
    * as clocks are enabled/disabled on-demand in response to peripheral
    * requests.  Deleting such lines is safe on xG21 devices and will
    * reduce provide a small reduction in code size.
    */
   CMU_ClockEnable(cmuClock_IADC0, true);
   CMU_ClockEnable(cmuClock_GPIO, true);

   // Use the FSRC0 as the IADC clock so it can run in EM2
   CMU_ClockSelectSet(cmuClock_IADCCLK, cmuSelect_FSRCO);

   // Set the prescaler needed for the intended IADC clock frequency
   init.srcClkPrescale = IADC_calcSrcClkPrescale(IADC0, 20000000, 0);

   // Shutdown between conversions to reduce current
   init.warmup = iadcWarmupNormal;

   /*
    * Configuration 0 is used by both scan and single conversions by
    * default.  Use unbuffered AVDD as reference and specify the
    * AVDD supply voltage in mV.
    *
    * Resolution is not configurable directly but is based on the
    * selected oversampling ratio (osrHighSpeed), which defaults to
    * 2x and generates 12-bit results.
    */
   initAllConfigs.configs[0].reference = iadcCfgReferenceInt1V2;
   initAllConfigs.configs[0].vRef = 1200;
   initAllConfigs.configs[0].osrHighSpeed = iadcCfgOsrHighSpeed2x;

   /*
    * CLK_SRC_ADC must be prescaled by some value greater than 1 to
    * derive the intended CLK_ADC frequency.
    *
    * Based on the default 2x oversampling rate (OSRHS)...
    *
    * conversion time = ((4 * OSRHS) + 2) / fCLK_ADC
    *
    * ...which results in a maximum sampling rate of 833 ksps with the
    * 2-clock input multiplexer switching time is included.
    */
   initAllConfigs.configs[0].adcClkPrescale = IADC_calcAdcClkPrescale(IADC0,
                                                                      1000000,
                                                                      0,
                                                                      iadcCfgModeNormal,
                                                                      init.srcClkPrescale);

   /*
    * Specify the input channel.  When negInput = iadcNegInputGnd, the
    * conversion is single-ended.
    */
   singleInput.posInput   = iadcPosInputAvdd;
   singleInput.negInput   = iadcNegInputGnd;

   // Initialize IADC
   IADC_init(IADC0, &init, &initAllConfigs);

   // Initialize a single-channel conversion
   IADC_initSingle(IADC0, &initSingle, &singleInput);

   // Clear any previous interrupt flags
   IADC_clearInt(IADC0, _IADC_IF_MASK);

   // Enable single-channel done interrupts
   IADC_enableInt(IADC0, IADC_IEN_SINGLEDONE);

   // Enable IADC interrupts
   NVIC_ClearPendingIRQ(IADC_IRQn);
   NVIC_EnableIRQ(IADC_IRQn);

  sl_power_manager_remove_em_requirement(SL_POWER_MANAGER_EM1);
       sl_power_manager_add_em_requirement(SL_POWER_MANAGER_EM2);
}
// -----------------------------------------------------------------------------
//                          Static Function Definitions
// -----------------------------------------------------------------------------
