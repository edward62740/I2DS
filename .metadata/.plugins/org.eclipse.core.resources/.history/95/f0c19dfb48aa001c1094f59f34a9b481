/***************************************************************************//**
 * @file
 * @brief app_init.c
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/

// -----------------------------------------------------------------------------
//                                   Includes
// -----------------------------------------------------------------------------
#include "app_log.h"
#include "sl_app_common.h"
#include "sl_si70xx.h"
#include "sl_i2cspm_instances.h"
#include "sl_sleeptimer.h"
#include "app_process.h"
#include "app_framework_common.h"
#include "em_cmu.h"
#include "em_iadc.h"
#include "em_prs.h"
// -----------------------------------------------------------------------------
//                              Macros and Typedefs
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                          Static Function Declarations
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                                Global Variables
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                                Static Variables
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
//                          Public Function Definitions
// -----------------------------------------------------------------------------
/******************************************************************************
* Application framework init callback
******************************************************************************/
void emberAfInitCallback(void)
{
  EmberStatus status;
  uint8_t device_id = 0;
  // init temperature sensor

  emberAfAllocateEvent(&report_control, &report_handler);
  // CLI info message
  app_log_info("\nSensor\n");


  status = emberNetworkInit();
  app_log_info("Network status 0x%02X\n", status);
  emberResetNetworkState();
  status = emberSetSecurityKey(&security_key);
  app_log_info("Network status 0x%02X\n", status);

  EmberNetworkParameters parameters;
MEMSET(&parameters, 0, sizeof(EmberNetworkParameters));
parameters.radioTxPower = 0;
parameters.radioChannel = 11;
parameters.panId = 0x01FF;
status = emberJoinNetwork(EMBER_STAR_SLEEPY_END_DEVICE, &parameters);
app_log_info("Network status 0x%02X\n", status);
#if defined(EMBER_AF_PLUGIN_BLE)
  bleConnectionInfoTableInit();
#endif
  emberAfPluginPollEnableShortPolling(true);
  // output PRS_MODEM_PRESENT signal on PC7 for oscilloscope inspection
    GPIO_PinModeSet(gpioPortC, 7, gpioModePushPull, 0);
    void halEnablePrs(uint8_t channel,
                      uint8_t loc,
                      GPIO_Port_TypeDef port,
                      uint8_t pin,
                      uint8_t source,
                      uint8_t signal)

    PRS_SourceAsyncSignalSet(10,
                              ( ( uint32_t ) (PRS_MODEM_PRESENT & _PRS_CH_CTRL_SOURCESEL_MASK) >> _PRS_CH_CTRL_SOURCESEL_SHIFT << _PRS_ASYNC_CH_CTRL_SOURCESEL_SHIFT),
                              ( ( uint32_t ) (PRS_MODEM_PRESENT & _PRS_CH_CTRL_SIGSEL_MASK) >> _PRS_CH_CTRL_SIGSEL_SHIFT) << _PRS_ASYNC_CH_CTRL_SIGSEL_SHIFT) );
     PRS_PinOutput(10, prsTypeAsync, gpioPortC, 7);

    // Enable ADC clock
    CMU_ClockEnable(cmuClock_ADC0, true);

    /* Base the ADC configuration on the default setup. */
    ADC_Init_TypeDef       init  = ADC_INIT_DEFAULT;
    ADC_InitSingle_TypeDef sInit = ADC_INITSINGLE_DEFAULT;

    sInit.prsEnable = true;      // Enable to start conversion on PRS signal
    sInit.prsSel = adcPRSSELCh10; // Select PRS channel where PRS_MODEM_PRESENT was configured

    // Initialize timebases
    init.timebase = ADC_TimebaseCalc(0);
    init.prescale = ADC_PrescaleCalc(400000, 0);
    ADC_Init(ADC0, &init);

    sInit.reference   = adcRef5V;
    sInit.acqTime     = adcAcqTime8;
    sInit.posSel      = adcPosSelAVDD;
    ADC_InitSingle(ADC0, &sInit);

    // output PRS_ADC0_SINGLE signal on PC7 for oscilloscope inspection
    GPIO_PinModeSet(gpioPortC, 9, gpioModePushPull, 0);
    halEnablePrs(
               11,
               2,
               gpioPortC,
               9,
               (PRS_ADC0_SINGLE & _PRS_CH_CTRL_SOURCESEL_MASK) >> _PRS_CH_CTRL_SOURCESEL_SHIFT,
               (PRS_ADC0_SINGLE & _PRS_CH_CTRL_SIGSEL_MASK) >> _PRS_CH_CTRL_SIGSEL_SHIFT);

    ADC_IntEnable(ADC0, ADC_IF_SINGLE);
    NVIC_EnableIRQ(ADC0_IRQn);

  sl_power_manager_remove_em_requirement(SL_POWER_MANAGER_EM1);
       sl_power_manager_add_em_requirement(SL_POWER_MANAGER_EM2);
}
// -----------------------------------------------------------------------------
//                          Static Function Definitions
// -----------------------------------------------------------------------------
