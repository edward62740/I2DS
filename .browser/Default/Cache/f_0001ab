{"availableCount":104,"searchTerms":[],"userState":"8053dc1a-8f1b-4753-a5a0-f4c68e227ab8","resources":[{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"Project to run AWS Tests on Silicon Labs boards.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.aws_tests.example/aws_tests/aws_tests.slcp","text":"Amazon - AWS - Tests","priority":9999999,"category":"SOFTWARE","toolTipText":"Project to run AWS Tests on Silicon Labs boards."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"Standalone Bootloader using the BGAPI protocol for UART DFU. This is the recommended UART bootloader for the BLE protocol stack.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-uart-bgapi.sample-apps/bootloader-uart-bgapi/bootloader-uart-bgapi.slcp","text":"BGAPI UART DFU Bootloader","priority":9999999,"category":"SOFTWARE","toolTipText":"Standalone Bootloader using the BGAPI protocol for UART DFU. This is the recommended UART bootloader for the BLE protocol stack.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x21800 (or 0x8021800 for device with 0x8000000 flash base), and have a size of 86 kB. This can be configured on the \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\". See UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-storage-internal-ble.sample-apps/bootloader-storage-internal-ble/bootloader-storage-internal-ble.slcp","text":"Bluetooth in-place OTA DFU Bootloader","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x21800 (or 0x8021800 for device with 0x8000000 flash base), and have a size of 86 kB. This can be configured on the \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\".\nSee UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"Standalone Bootloader using the EZSP protocol over SPI. This is the recommended SPI bootloader for the EmberZNet and Connect protocol stacks.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-spi-ezsp.sample-apps/bootloader-spi-ezsp/bootloader-spi-ezsp.slcp","text":"EZSP SPI Bootloader","priority":9999999,"category":"SOFTWARE","toolTipText":"Standalone Bootloader using the EZSP protocol over SPI. This is the recommended SPI bootloader for the EmberZNet and Connect protocol stacks.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project shows an empty configuration that can be used as a starting point to add components and functionality.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.cExeProject","text":"Empty C Project","priority":1,"category":"SOFTWARE","toolTipText":"This example project shows an empty configuration that can be used as a starting point to add components and functionality."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project shows an empty configuration that can be used as a starting point to add components and functionality.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.cppExeProject","text":"Empty C++ Project","priority":1,"category":"SOFTWARE","toolTipText":"This example project shows an empty configuration that can be used as a starting point to add components and functionality."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/connect/direct_mode_device/readme.md"],"description":"This sample app allows direct commissioning of nodes and exchange data between them via CLI commands.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.direct_mode_device.example/connect/direct_mode_device/direct_mode_device.slcp","text":"Flex (Connect) - SoC Direct Mode Device","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample app allows direct commissioning of nodes and exchange data between them via CLI commands."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/connect/ecdh_key_exchange/readme.md"],"description":"This sample application illustrates how we could share a network key between two devices in a secure way. The application works via CLI commands which break down the steps to understand and analyze this mechanism.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.ecdh_key_exchange.example/connect/ecdh_key_exchange/ecdh_key_exchange.slcp","text":"Flex (Connect) - SoC ECDH Key Exchange","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample application illustrates how we could share a network key between two devices in a secure way. The application works via CLI commands which break down the steps to understand and analyze this mechanism."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/connect/connect_empty/readme.md"],"description":"The Connect Empty project is a barebone Connect app that can be a basis of streamlined proprietary solutions.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.connect_empty.example/connect/connect_empty/connect_empty.slcp","text":"Flex (Connect) - SoC Empty","priority":9999999,"category":"SOFTWARE","toolTipText":"The Connect Empty project is a barebone Connect app that can be a basis of streamlined proprietary solutions."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/connect/mac_mode_device/readme.md"],"description":"A 802.15.4 sample app that provides CLI commands to form a network or join an existing network, send data to another node based on short or long addresses.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.mac_mode_device.example/connect/mac_mode_device/mac_mode_device.slcp","text":"Flex (Connect) - SoC MAC Mode Device","priority":9999999,"category":"SOFTWARE","toolTipText":"A 802.15.4 sample app that provides CLI commands to form a network or join an existing network, send data to another node based on short or long addresses."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/connect/connect_sink_sensor/readme.md"],"description":"Demonstrates how to properly setup a star network topology in which communication occurs in both directions between the Sink and the Sensor(s) nodes. The PB0 pushbutton can be used to enable or disable sleep, combined with changing the VCOM option 'Enable reception when sleeping'.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.sensor.example/connect/sensor_sink/sensor/sensor.slcp","text":"Flex (Connect) - SoC Sensor","priority":9999999,"category":"SOFTWARE","toolTipText":"Demonstrates how to properly setup a star network topology in which communication occurs in both directions between the Sink and the Sensor(s) nodes. The PB0 pushbutton can be used to enable or disable sleep, combined with changing the VCOM option 'Enable reception when sleeping'."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/connect/connect_sink_sensor/readme.md"],"description":"The Sink example is the counterpart of the Sensor example. It receives reports of Sensor nodes joining to its network.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.sink.example/connect/sensor_sink/sink/sink.slcp","text":"Flex (Connect) - SoC Sink","priority":9999999,"category":"SOFTWARE","toolTipText":"The Sink example is the counterpart of the Sensor example. It receives reports of Sensor nodes joining to its network."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"The purpose of the application is to demonstrate a simple wireless communication between two or more boards, using the connect SDK. In combination with the Connect Light DMP sample application it creates a basic switch functionality, where the LEDs can be toggled in the Light node. After power up, the Light (network coordinator) create its own local network, and the Switch modules (low power end-nodes) can join to this network, and control the Light node. If a local network is established with the - form - CLI command, the Switch nodes can join with the - join - CLI command. After that point, the Light can be controlled with pushing the PB1 button on any connected Switch node.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.switch.example/connect/light_switch/switch/switch.slcp","text":"Flex (Connect) - SoC Switch Example","priority":9999999,"category":"SOFTWARE","toolTipText":"The purpose of the application is to demonstrate a simple wireless communication between two or more boards, using the connect SDK. In combination with the Connect Light DMP sample application it creates a basic switch functionality, where the LEDs can be toggled in the Light node. After power up, the Light (network coordinator) create its own local network, and the Switch modules (low power end-nodes) can join to this network, and control the Light node. If a local network is established with the - form - CLI command, the Switch nodes can join with the - join - CLI command. After that point, the Light can be controlled with pushing the PB1 button on any connected Switch node."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/rail/burst_duty_cycle/readme.md"],"description":"The example sends a burst in Master Mode (sending a burst long enough to be received by a Slave) and listens in Duty Cycle mode in Slave mode. The app checks the time of the burst and tells the user if the Slave ON time is too short for reliable reception. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.burst_duty_cycle.example/rail/burst_duty_cycle/burst_duty_cycle.slcp","text":"Flex (RAIL) - Burst Duty Cycle","priority":9999999,"category":"SOFTWARE","toolTipText":"The example sends a burst in Master Mode (sending a burst long enough to be received by a Slave) and listens in Duty Cycle mode in Slave mode. The app checks the time of the burst and tells the user if the Slave ON time is too short for reliable reception. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/rail/rail_empty/readme.md"],"description":"The RAIL Empty project is a barebone RAIL app that can be a basis of a proprietary solutions. This comes prepared with a Single PHY radio configurator and a basic callback function for RAIL. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.rail_empty.example/rail/rail_empty/rail_empty.slcp","text":"Flex (RAIL) - Empty Example","priority":9999999,"category":"SOFTWARE","toolTipText":"The RAIL Empty project is a barebone RAIL app that can be a basis of a proprietary solutions. This comes prepared with a Single PHY radio configurator and a basic callback function for RAIL. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/rail/emode/readme.md"],"description":"This is a customizable Energy Mode sample application. To control the sample app please use the CLI interface over UART. Through CLI you can change the energy mode during different task of the sample app, like idle, sending or receiving. To get started send the 'help' command over CLI. To enter in Idle mode with different energy levels send 'idle x' where x stand for a number corresponding for an energy mode (0:empty loop, 1:EM1, 2:EM2, 3:EM3). To test the TX function you can use 'cw x', this will set the radio into Continuous Wave mode with selected energy level. 'periodic_tx us x' command also useful to test TX function with packets, it will send packets with us microseconds delays, and return into selected x energy mode after it. To test RX functions use 'rx x' or 'periodic_rx us_delay us_rx x' where x is the energy level, us_delay is the periodic delay between RX in microseconds, and us_rx is the length of the RX on in microseconds. To set or get TX power level use 'set_power d_dbm' or 'get_power' where d_dbm stands for the deci-dBm value to set the power level to. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported. Note: Due to the higher current consumption of the continuous radio usage, it is recommended to power the board over USB instead of coin cell.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.emode.example/rail/emode/emode.slcp","text":"Flex (RAIL) - Energy Mode","priority":9999999,"category":"SOFTWARE","toolTipText":"This is a customizable Energy Mode sample application. To control the sample app please use the CLI interface over UART. Through CLI you can change the energy mode during different task of the sample app, like idle, sending or receiving. To get started send the 'help' command over CLI. To enter in Idle mode with different energy levels send 'idle x' where x stand for a number corresponding for an energy mode (0:empty loop, 1:EM1, 2:EM2, 3:EM3). To test the TX function you can use 'cw x', this will set the radio into Continuous Wave mode with selected energy level. 'periodic_tx us x' command also useful to test TX function with packets, it will send packets with us microseconds delays, and return into selected x energy mode after it. To test RX functions use 'rx x' or 'periodic_rx us_delay us_rx x' where x is the energy level, us_delay is the periodic delay between RX in microseconds, and us_rx is the length of the RX on in microseconds. To set or get TX power level use 'set_power d_dbm' or 'get_power' where d_dbm stands for the deci-dBm value to set the power level to. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported. Note: Due to the higher current consumption of the continuous radio usage, it is recommended to power the board over USB instead of coin cell."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"The purpose of the application is to demonstrate  a simple wireless communication between two or more boards. In combination with the Switch sample application it creates a basic light functionality, where the light can be toggled in the Light node. After power up, the node is in ADVERTISE state. It means broadcast messages are sent periodically. After pushing PB1 button, the node is connected, and ready for toggling the light. This is called the READY state. If the Switch module has done the same procedure, light can be toggled from all the boards with pushing BP0 button","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.light.example/rail/light/light.slcp","text":"Flex (RAIL) - Light","priority":9999999,"category":"SOFTWARE","toolTipText":"The purpose of the application is to demonstrate  a simple wireless communication between two or more boards. In combination with the Switch sample application it creates a basic light functionality, where the light can be toggled in the Light node. After power up, the node is in ADVERTISE state. It means broadcast messages are sent periodically. After pushing PB1 button, the node is connected, and ready for toggling the light. This is called the READY state. If the Switch module has done the same procedure, light can be toggled from all the boards with pushing BP0 button"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"The purpose of the application is to demonstrate  a simple wireless communication between two or more boards. In combination with the Switch sample application it creates a basic light functionality, where the light can be toggled in the Light node. After power up, the node is in ADVERTISE state. It means broadcast messages are sent periodically. After pushing PB1 button, the node is connected, and ready for toggling the light. This is called the READY state. If the Switch module has done the same procedure, light can be toggled from all the boards with pushing BP0 button","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.light_std.example/rail/light_std/light_std.slcp","text":"Flex (RAIL) - Light Standards","priority":9999999,"category":"SOFTWARE","toolTipText":"The purpose of the application is to demonstrate  a simple wireless communication between two or more boards. In combination with the Switch sample application it creates a basic light functionality, where the light can be toggled in the Light node. After power up, the node is in ADVERTISE state. It means broadcast messages are sent periodically. After pushing PB1 button, the node is connected, and ready for toggling the light. This is called the READY state. If the Switch module has done the same procedure, light can be toggled from all the boards with pushing BP0 button"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/rail/long_preamble_duty_cycle/readme.md"],"description":"This Long Preamble Duty Cycle shows how can 2 radios communicate with as less energy used as possible. For this propose this sample app uses the Preamble detect function of the radio. The receiving radio is only in RX for the shortest time needed to detect any part of a preamble, if there was no preamble detection it goes back to EM1, sender radio send a longer preamble to be sure that the receiver will detect it. If there was a detection it will stay in RX mode and receive the packet. The sample app can be used for sending and receiving also, to send a packet press a button PB0 or PB1, when sent LED1 will be toggled and when received LED0 will be toggled. The statistic is printed on the screen of the LCD and the received packets data will be written out on the terminal. Sample app can be also managed through CLI, for more info please send 'help' through terminal. The given PHY can be modified, but if it is modified please check the duty_cycle_config.h file to maintain the correct settings for on and off time. Energy profiler should be used to look at energy consumption. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported. NOTE: Due to the higher current consumption of the continuous radio usage (especially in Rx Mode), it is not recommended to power the boards from a coin cell. Instead, a USB power bank can be used if portability is needed.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.long_preamble_duty_cycle.example/rail/long_preamble_duty_cycle/long_preamble_duty_cycle.slcp","text":"Flex (RAIL) - Long Preamble Duty Cycle","priority":9999999,"category":"SOFTWARE","toolTipText":"This Long Preamble Duty Cycle shows how can 2 radios communicate with as less energy used as possible. For this propose this sample app uses the Preamble detect function of the radio. The receiving radio is only in RX for the shortest time needed to detect any part of a preamble, if there was no preamble detection it goes back to EM1, sender radio send a longer preamble to be sure that the receiver will detect it. If there was a detection it will stay in RX mode and receive the packet. The sample app can be used for sending and receiving also, to send a packet press a button PB0 or PB1, when sent LED1 will be toggled and when received LED0 will be toggled. The statistic is printed on the screen of the LCD and the received packets data will be written out on the terminal. Sample app can be also managed through CLI, for more info please send 'help' through terminal. The given PHY can be modified, but if it is modified please check the duty_cycle_config.h file to maintain the correct settings for on and off time. Energy profiler should be used to look at energy consumption. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported. NOTE: Due to the higher current consumption of the continuous radio usage (especially in Rx Mode), it is not recommended to power the boards from a coin cell. Instead, a USB power bank can be used if portability is needed."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/rail/railtest/readme.md"],"description":"The RAILtest application (RAILtest) provides a simple tool for testing the radio and the functionality of the RAIL library via CLI. For more advanced usage, developers must write software against the RAIL library and create a custom radio configuration.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.railtest.example/rail/railtest/railtest.slcp","text":"Flex (RAIL) - RAILtest","priority":9999999,"category":"SOFTWARE","toolTipText":"The RAILtest application (RAILtest) provides a simple tool for testing the radio and the functionality of the RAIL library via CLI. For more advanced usage, developers must write software against the RAIL library and create a custom radio configuration."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/rail/range_test/readme.md"],"description":"This is a customizable Range Test Sample Application that demonstrates over the air range of the EFR32. This sample app can act as a Transmitter and a Receiver. The role can be selected in the LCD menu. Flashing this app into two separate boards makes it possible to test the features and specification of the radio. The sample also provides an example how the RAIL API can be used. A menu is displayed in the LCD, which allows the user to see the most important information about the settings and also change some of them. The left button navigates in the menu and the right button selects or changes options. The bottom line always shows what the buttons do in the particular context. In Tx Mode, the user can send packets. Packet length (7..64 bytes) and the number of packets to transmit (from 500 up to continuous) can be set. Output power can be set in the LCD menu, in 0.5dBm steps (power setpoint), between -15..+20dBm. Actual minimum and maximum power may vary in different frequencies as well as the power that is actually set by RAIL. The LCD menu informs the user about the setpoint and the actual power. In the LCD menu, the Power item displays the setpoint first, then actual value. In Rx Mode, the radio listens on the given channel and inspects the packets received. Only packets that are sent with the expected device ID, will be processed. Packet Error Rate, Bit Error Rate and RSSI of the packets is displayed to inform about the quality of the transmission. For both modes, the channel on which the Tx/Rx radio will operate and the device IDs of the transmitters and receiver radio, can be set. Radio related events can be logged on UART on demand. CLI can be used for setting and starting/stoping the application as well, to start with CLI interface send 'help' over terminal. NOTE: Due to the higher current consumption of the continuous radio usage (especially in Rx Mode), it is not recommended to power the boards from a coin cell. Instead, an USB power bank can be used if portability is needed.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.range_test.example/rail/range_test/range_test.slcp","text":"Flex (RAIL) - Range Test","priority":9999999,"category":"SOFTWARE","toolTipText":"This is a customizable Range Test Sample Application that demonstrates over the air range of the EFR32. This sample app can act as a Transmitter and a Receiver. The role can be selected in the LCD menu. Flashing this app into two separate boards makes it possible to test the features and specification of the radio. The sample also provides an example how the RAIL API can be used. A menu is displayed in the LCD, which allows the user to see the most important information about the settings and also change some of them. The left button navigates in the menu and the right button selects or changes options. The bottom line always shows what the buttons do in the particular context. In Tx Mode, the user can send packets. Packet length (7..64 bytes) and the number of packets to transmit (from 500 up to continuous) can be set. Output power can be set in the LCD menu, in 0.5dBm steps (power setpoint), between -15..+20dBm. Actual minimum and maximum power may vary in different frequencies as well as the power that is actually set by RAIL. The LCD menu informs the user about the setpoint and the actual power. In the LCD menu, the Power item displays the setpoint first, then actual value. In Rx Mode, the radio listens on the given channel and inspects the packets received. Only packets that are sent with the expected device ID, will be processed. Packet Error Rate, Bit Error Rate and RSSI of the packets is displayed to inform about the quality of the transmission. For both modes, the channel on which the Tx/Rx radio will operate and the device IDs of the transmitters and receiver radio, can be set. Radio related events can be logged on UART on demand. CLI can be used for setting and starting/stoping the application as well, to start with CLI interface send 'help' over terminal. NOTE: Due to the higher current consumption of the continuous radio usage (especially in Rx Mode), it is not recommended to power the boards from a coin cell. Instead, an USB power bank can be used if portability is needed."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/rail/simple_trx/readme.md"],"description":"This application demonstrates the simplest exchange of transmit and receive operation between two nodes. Both nodes are capable of sending and receiving messages. On the WSTK, any button press (PB0/PB1) will send a message. LED0 will toggle on message send and LED1 will toggle on message receive. CLI can also be used for sending and showing received messages. To send enter 'tx' or 'send'. By default the received packets will be printed out in terminal, to enable or disable print enter 'rx 1' ('receive 1') or 'rx 0' ('receive 0') in terminal. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported. NOTE: Due to the higher current consumption of the continuous radio usage (especially in Rx Mode), it is not recommended to power the boards from a coin cell. Instead, an USB power bank can be used if portability is needed.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.simple_trx.example/rail/simple_trx/simple_trx.slcp","text":"Flex (RAIL) - Simple TRX","priority":9999999,"category":"SOFTWARE","toolTipText":"This application demonstrates the simplest exchange of transmit and receive operation between two nodes. Both nodes are capable of sending and receiving messages. On the WSTK, any button press (PB0/PB1) will send a message. LED0 will toggle on message send and LED1 will toggle on message receive. CLI can also be used for sending and showing received messages. To send enter 'tx' or 'send'. By default the received packets will be printed out in terminal, to enable or disable print enter 'rx 1' ('receive 1') or 'rx 0' ('receive 0') in terminal. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported.\nNOTE: Due to the higher current consumption of the continuous radio usage (especially in Rx Mode), it is not recommended to power the boards from a coin cell. Instead, an USB power bank can be used if portability is needed."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/rail/simple_trx_std/readme.md"],"description":"This application demonstrates the simplest exchange of transmit and receive operation between two nodes using IEEE Std. 802.15.4 and IEEE Std. 802.15.4g and BLE. Both nodes can send and receive IEEE Std. 802.15.4 and IEEE Std. 802.15.4g or BLE advertising frames. With IEEE Std. 802.15.4 the frame can be sent and received with CSMA/CA, auto-ACK, address filtering and setable Frame Control Frame (available settings broadcast or unicast). With IEEE Std. 802.15.4g the frame can be sent and received with auto-ACK, address filtering and setable Frame Control Frame (available settings broadcast or unicast). On the WSTK, any button press (PB0/PB1) will send a message. LED0 will toggle on message send and LED1 will toggle on message receive. CLI can also be used for sending and showing received messages. To send enter 'send'. By default the received packets will be printed out in terminal. To change standard to BLE, the Flex - RAIL BLE support software component shall be installed under Flex/RAIL/Utilility. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported. NOTE: Due to the higher current consumption of the continuous radio usage (especially in Rx Mode), it is not recommended to power the boards from a coin cell. Instead, an USB power bank can be used if portability is needed.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.simple_trx_std.example/rail/simple_trx_std/simple_trx_std.slcp","text":"Flex (RAIL) - Simple TRX Standards","priority":9999999,"category":"SOFTWARE","toolTipText":"This application demonstrates the simplest exchange of transmit and receive operation between two nodes using IEEE Std. 802.15.4 and IEEE Std. 802.15.4g and BLE. Both nodes can send and receive IEEE Std. 802.15.4 and IEEE Std. 802.15.4g or BLE advertising frames. With IEEE Std. 802.15.4 the frame can be sent and received with CSMA/CA, auto-ACK, address filtering and setable Frame Control Frame (available settings broadcast or unicast). With IEEE Std. 802.15.4g the frame can be sent and received with auto-ACK, address filtering and setable Frame Control Frame (available settings broadcast or unicast). On the WSTK, any button press (PB0/PB1) will send a message. LED0 will toggle on message send and LED1 will toggle on message receive. CLI can also be used for sending and showing received messages. To send enter 'send'. By default the received packets will be printed out in terminal. To change standard to BLE, the Flex - RAIL BLE support software component shall be installed under Flex/RAIL/Utilility. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported. NOTE: Due to the higher current consumption of the continuous radio usage (especially in Rx Mode), it is not recommended to power the boards from a coin cell. Instead, an USB power bank can be used if portability is needed."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/rail/simple_trx_auto_ack/readme.md"],"description":"This application demonstrates the simplest exchange of TX and ACK (software based) operation between two nodes. Both nodes are capable of sending messages and receiving ACKs. On the WSTK, any button press (PB0/PB1) will send a message. LED0 will toggle on message send and LED1 will toggle on ACK receive. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.simple_trx_auto_ack.example/rail/simple_trx_auto_ack/simple_trx_auto_ack.slcp","text":"Flex (RAIL) - Simple TRX with Auto-ACK","priority":9999999,"category":"SOFTWARE","toolTipText":"This application demonstrates the simplest exchange of TX and ACK (software based) operation between two nodes. Both nodes are capable of sending messages and receiving ACKs. On the WSTK, any button press (PB0/PB1) will send a message. LED0 will toggle on message send and LED1 will toggle on ACK receive. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"The purpose of the application is to demonstrate a simple wireless communication between two or more boards. In combination with the Light sample application it creates a basic switch functionality, where the light can be toggled in the Light node. After power up, the node is in SCAN state. It means the broadcast messages of the light modules can be captured. After pushing PB1 button, the closest Light module will be connected. This is called the LINK state. If the Light module has done the same procedure, light can be toggled from all the boards with pushing BP0 button","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.switch.example/rail/switch/switch.slcp","text":"Flex (RAIL) - Switch","priority":9999999,"category":"SOFTWARE","toolTipText":"The purpose of the application is to demonstrate a simple wireless communication between two or more boards. In combination with the Light sample application it creates a basic switch functionality, where the light can be toggled in the Light node. After power up, the node is in SCAN state. It means the broadcast messages of the light modules can be captured. After pushing PB1 button, the closest Light module will be connected. This is called the LINK state. If the Light module has done the same procedure, light can be toggled from all the boards with pushing BP0 button"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"The purpose of the application is to demonstrate a simple wireless communication between two or more boards. In combination with the Light sample application it creates a basic switch functionality, where the light can be toggled in the Light node. After power up, the node is in SCAN state. It means the broadcast messages of the light modules can be captured. After pushing PB1 button, the closest Light module will be connected. This is called the LINK state. If the Light module has done the same procedure, light can be toggled from all the boards with pushing BP0 button","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.switch_std.example/rail/switch_std/switch_std.slcp","text":"Flex (RAIL) - Switch Standards","priority":9999999,"category":"SOFTWARE","toolTipText":"The purpose of the application is to demonstrate a simple wireless communication between two or more boards. In combination with the Light sample application it creates a basic switch functionality, where the light can be toggled in the Light node. After power up, the node is in SCAN state. It means the broadcast messages of the light modules can be captured. After pushing PB1 button, the closest Light module will be connected. This is called the LINK state. If the Light module has done the same procedure, light can be toggled from all the boards with pushing BP0 button"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/rail/wmbus/readme.md"],"description":"Implements a Wireless M-Bus collector application. Uses the multi-PHY configurator. For details, see AN1119. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported. NOTE: Due to the higher current consumption of the continuous radio usage (especially in Rx Mode), it is not recommended to power the boards from a coin cell. Instead, an USB power bank can be used if portability is needed.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.wmbus_collector.example/rail/wmbus_collector/wmbus_collector.slcp","text":"Flex (RAIL) - Wireless M-bus Collector","priority":9999999,"category":"SOFTWARE","toolTipText":"Implements a Wireless M-Bus collector application. Uses the multi-PHY configurator. For details, see AN1119. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported. NOTE: Due to the higher current consumption of the continuous radio usage (especially in Rx Mode), it is not recommended to power the boards from a coin cell. Instead, an USB power bank can be used if portability is needed."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/flex/documentation/example/rail/wmbus/readme.md"],"description":"Implements a Wireless M-Bus collector application. Uses the multi-PHY configurator and capable of limited multi-PHY features, like asymmetric bidirectional modes. For details, see AN1119. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported. NOTE: Due to the higher current consumption of the continuous radio usage (especially in Rx Mode), it is not recommended to power the boards from a coin cell. Instead, an USB power bank can be used if portability is needed.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.wmbus_meter.example/rail/wmbus_meter/wmbus_meter.slcp","text":"Flex (RAIL) - Wireless M-bus Meter","priority":9999999,"category":"SOFTWARE","toolTipText":"Implements a Wireless M-Bus collector application. Uses the multi-PHY configurator and capable of limited multi-PHY features, like asymmetric bidirectional modes. For details, see AN1119. With one click this baremetal sample app can be run on an OS, currently MicriumOS and FreeRTOS is supported. NOTE: Due to the higher current consumption of the continuous radio usage (especially in Rx Mode), it is not recommended to power the boards from a coin cell. Instead, an USB power bank can be used if portability is needed."},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"Application Bootloader for all EFR32 and EFM32 devices with 1MB or larger flash, using the internal flash memory to store upgrade images received by the application over the air in an application specific way. This sample configuration supports storing multiple firmware update images simultaneously by configuring multiple storage slots. The storage layout is designed for 1024 kB EFR32xG12 devices, and the layout of the storage should be modified before being run on other devices. component:   - id: bootloader_core: This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store up to two firmware update images at a time, in two storage slots.  This sample configuration is designed to be used on 1024 kB EFR32xG12 devices, and needs to be re-configured to be used on other devices. This sample configuration is designed to be used with the following memory layout: Address 0 - 320 kB Application 320 kB - 356 kB reserved for SimEE (1 or 2) NVM 356 kB - 360 kB Bootload Info 360 kB - 690 kB Storage slot 0 690 kB - 1020 kB Storage slot 1 1020 kB - 1024 kB reserved for PStore NVM In order to use this sample bootloader configuration with applications, the applications also need to be built to account for the fact that part of the main flash is also used for firmware update image storage. For EmberZNet, Silicon Labs Thread and Flex Application Builder projects, this can be achieved by configuring the project to build for the \"Local Storage Bootloader\", and setting the macro INTERNAL_STORAGE_SIZE_KB to 668, reserving 668 kB for storage (i.e. everything from address 356 kB and up). For Bluetooth projects, the size of the application needs to be manually changed in the linker file. The \"bootload info\" meta-information, which tells the bootloader which storage slot to install the next firmware update from, is configured under \"Components->Common Storage\" to be placed at address 0x59000 (356 kB). The first storage slot is configured to start at address 0x5A000 (360 kB), because the bootload info takes up 2 flash pages of 2 kB. See UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-storage-internal.sample-apps/bootloader-storage-internal/bootloader-storage-internal.slcp","text":"Internal Storage Bootloader (multiple images on 1MB device)","priority":9999999,"category":"SOFTWARE","toolTipText":"Application Bootloader for all EFR32 and EFM32 devices with 1MB or larger flash, using the internal flash memory to store upgrade images received by the application over the air in an application specific way. This sample configuration supports storing multiple firmware update images simultaneously by configuring multiple storage slots. The storage layout is designed for 1024 kB EFR32xG12 devices, and the layout of the storage should be modified before being run on other devices.\ncomponent:\n  - id: bootloader_core: This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store up to two firmware update images at a time, in two storage slots.\n\nThis sample configuration is designed to be used on 1024 kB EFR32xG12 devices, and needs to be re-configured to be used on other devices.\nThis sample configuration is designed to be used with the following memory layout: Address 0 - 320 kB Application 320 kB - 356 kB reserved for SimEE (1 or 2) NVM 356 kB - 360 kB Bootload Info 360 kB - 690 kB Storage slot 0 690 kB - 1020 kB Storage slot 1 1020 kB - 1024 kB reserved for PStore NVM\nIn order to use this sample bootloader configuration with applications, the applications also need to be built to account for the fact that part of the main flash is also used for firmware update image storage. For EmberZNet, Silicon Labs Thread and Flex Application Builder projects, this can be achieved by configuring the project to build for the \"Local Storage Bootloader\", and setting the macro INTERNAL_STORAGE_SIZE_KB to 668, reserving 668 kB for storage (i.e. everything from address 356 kB and up). For Bluetooth projects, the size of the application needs to be manually changed in the linker file.\nThe \"bootload info\" meta-information, which tells the bootloader which storage slot to install the next firmware update from, is configured under \"Components->Common Storage\" to be placed at address 0x59000 (356 kB). The first storage slot is configured to start at address 0x5A000 (360 kB), because the bootload info takes up 2 flash pages of 2 kB.\nSee UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0xc0000 (or 0x80c0000 for device with 0x8000000 flash base), and have a size of 732 kB. This can be configured on the \"Storage\" tab. Note: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application. If support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information. See UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-storage-internal-single-1536k.sample-apps/bootloader-storage-internal-single-1536k/bootloader-storage-internal-single-1536k.slcp","text":"Internal Storage Bootloader (single image on 1536kB device)","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0xc0000 (or 0x80c0000 for device with 0x8000000 flash base), and have a size of 732 kB. This can be configured on the \"Storage\" tab. Note: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application.\nIf support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information.\nSee UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x80E8000, and have a size of 944 kB. This can be configured on the \"Storage\" tab. Note: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application. If support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information. See UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-storage-internal-single-1920k.sample-apps/bootloader-storage-internal-single-1920k/bootloader-storage-internal-single-1920k.slcp","text":"Internal Storage Bootloader (single image on 1920kB device)","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x80E8000, and have a size of 944 kB. This can be configured on the \"Storage\" tab. Note: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application.\nIf support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information.\nSee UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x84000 (or 0x8084000 for device with 0x8000000 flash base), and have a size of 448 kB. This can be configured on the \"Storage\" tab. This sample configuration works out-of-the-box with the \"Local Storage Bootloader\" option in Silicon Labs EmberZNet Application Builder projects as well as Bluetooth and Connect projects. The configuration is designed to be safe to use together with applications that use SimEE1, SimEE2, NVM3 or PStore as their NVM system. When changing the storage layout of the bootloader, take care to ensure that there is no overlap between the memory space the bootloader expects to use, and the memory space the application or NVM system expects to use. For Silicon Labs EmberZNet Application Builder projects, the INTERNAL_STORAGE_SIZE_KB macro can be configured in the application to reserve space for the bootloader storage area. On 1024 kB EFR32xG12 devices, this macro is by default set to 506 for applications using SimEE1, and 492 for applications using SimEE2. Note: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader  project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application. If support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information. See UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-storage-internal-single.sample-apps/bootloader-storage-internal-single/bootloader-storage-internal-single.slcp","text":"Internal Storage Bootloader (single image on 1MB device)","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x84000 (or 0x8084000 for device with 0x8000000 flash base), and have a size of 448 kB. This can be configured on the \"Storage\" tab.\nThis sample configuration works out-of-the-box with the \"Local Storage Bootloader\" option in Silicon Labs EmberZNet Application Builder projects as well as Bluetooth and Connect projects. The configuration is designed to be safe to use together with applications that use SimEE1, SimEE2, NVM3 or PStore as their NVM system. When changing the storage layout of the bootloader, take care to ensure that there is no overlap between the memory space the bootloader expects to use, and the memory space the application or NVM system expects to use.\nFor Silicon Labs EmberZNet Application Builder projects, the INTERNAL_STORAGE_SIZE_KB macro can be configured in the application to reserve space for the bootloader storage area. On 1024 kB EFR32xG12 devices, this macro is by default set to 506 for applications using SimEE1, and 492 for applications using SimEE2.\nNote: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader  project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application.\nIf support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information.\nSee UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x100000 (or 0x8100000 for device with 0x8000000 flash base), and have a size of 988 kB. This can be configured on the \"Storage\" tab. Note: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application. If support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information. See UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-storage-internal-single-2048k.sample-apps/bootloader-storage-internal-single-2048k/bootloader-storage-internal-single-2048k.slcp","text":"Internal Storage Bootloader (single image on 2MB device)","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x100000 (or 0x8100000 for device with 0x8000000 flash base), and have a size of 988 kB. This can be configured on the \"Storage\" tab.\nNote: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application.\nIf support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information.\nSee UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x28000 (or 0x8028000 for device with 0x8000000 flash base), and have a size of 120 kB. This can be configured on the \"Storage\" tab. This sample configuration works out-of-the-box with the \"Local Storage Bootloader\" option in Silicon Labs EmberZNet Application Builder projects as well as Bluetooth and Connect projects. The configuration is designed to be safe to use together with applications that use SimEE1, SimEE2, NVM3 or PStore as their NVM system. When changing the storage layout of the bootloader, take care to ensure that there is no overlap between the memory space the bootloader expects to use, and the memory space the application or NVM system expects to use. Note: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application. If support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information. See UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-storage-internal-single-352k.sample-apps/bootloader-storage-internal-single-352k/bootloader-storage-internal-single-352k.slcp","text":"Internal Storage Bootloader (single image on 352kB device)","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x28000 (or 0x8028000 for device with 0x8000000 flash base), and have a size of 120 kB. This can be configured on the \"Storage\" tab.\nThis sample configuration works out-of-the-box with the \"Local Storage Bootloader\" option in Silicon Labs EmberZNet Application Builder projects as well as Bluetooth and Connect projects. The configuration is designed to be safe to use together with applications that use SimEE1, SimEE2, NVM3 or PStore as their NVM system. When changing the storage layout of the bootloader, take care to ensure that there is no overlap between the memory space the bootloader expects to use, and the memory space the application or NVM system expects to use.\nNote: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application.\nIf support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information.\nSee UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x44000 (or 0x8044000 for device with 0x8000000 flash base), and have a size of 192 kB. This can be configured on the \"Storage\" tab. This sample configuration works out-of-the-box with the \"Local Storage Bootloader\" option in Silicon Labs EmberZNet Application Builder projects as well as Bluetooth and Connect projects. The configuration is designed to be safe to use together with applications that use SimEE1, SimEE2, NVM3 or PStore as their NVM system. When changing the storage layout of the bootloader, take care to ensure that there is no overlap between the memory space the bootloader expects to use, and the memory space the application or NVM system expects to use. For Silicon Labs EmberZNet Application Builder projects, the INTERNAL_STORAGE_SIZE_KB macro can be configured in the application to reserve space for the bootloader storage area. On 512 kB EFR32xG13 devices, this macro is by default set to 254 for applications using SimEE1, and 240 for applications using SimEE2. Note: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application. If support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information. See UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-storage-internal-single-512k.sample-apps/bootloader-storage-internal-single-512k/bootloader-storage-internal-single-512k.slcp","text":"Internal Storage Bootloader (single image on 512kB device)","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x44000 (or 0x8044000 for device with 0x8000000 flash base), and have a size of 192 kB. This can be configured on the \"Storage\" tab.\nThis sample configuration works out-of-the-box with the \"Local Storage Bootloader\" option in Silicon Labs EmberZNet Application Builder projects as well as Bluetooth and Connect projects. The configuration is designed to be safe to use together with applications that use SimEE1, SimEE2, NVM3 or PStore as their NVM system. When changing the storage layout of the bootloader, take care to ensure that there is no overlap between the memory space the bootloader expects to use, and the memory space the application or NVM system expects to use.\nFor Silicon Labs EmberZNet Application Builder projects, the INTERNAL_STORAGE_SIZE_KB macro can be configured in the application to reserve space for the bootloader storage area. On 512 kB EFR32xG13 devices, this macro is by default set to 254 for applications using SimEE1, and 240 for applications using SimEE2.\nNote: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application.\nIf support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information.\nSee UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x84000 (or 0x8084000 for device with 0x8000000 flash base), and have a size of 448 kB. This can be configured on the \"Storage\" tab. Support for LZMA compressed GBL upgrade files is enabled in this sample configuration. In order for the sample to fit on most Silicon Labs devices, support encrypted GBL files has been disabled by selecting the \"Image Parser without encryption support\" component. If encrypted GBL files are desired, this component must be replaced with the \"Image Parser\" component. Similarly, the storage interface has been reduced to only support a single storage slot for bootloader size optimization. If multiple storage slots are desired, the \"Common Storage\" component must be enabled instead. Note: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application. If support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information. See UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-storage-internal-single-lzma.sample-apps/bootloader-storage-internal-single-lzma/bootloader-storage-internal-single-lzma.slcp","text":"Internal Storage Bootloader (single image with LZMA compression, 1MB flash)","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample configuration of the Gecko bootloader configures the bootloader to use the internal main flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x84000 (or 0x8084000 for device with 0x8000000 flash base), and have a size of 448 kB. This can be configured on the \"Storage\" tab.\nSupport for LZMA compressed GBL upgrade files is enabled in this sample configuration. In order for the sample to fit on most Silicon Labs devices, support encrypted GBL files has been disabled by selecting the \"Image Parser without encryption support\" component. If encrypted GBL files are desired, this component must be replaced with the \"Image Parser\" component. Similarly, the storage interface has been reduced to only support a single storage slot for bootloader size optimization. If multiple storage slots are desired, the \"Common Storage\" component must be enabled instead.\nNote: This sample configuration will not use all available flash space for bootloader storage. As the memory layout may differ between different application projects, this bootloader project has a safe configuration that ensures that it doesn't overlap with any application sample configuration. This comes at the expense of leaving some unused flash space. Always make sure to configure your bootloader to use the same area for storage as is set aside by your application.\nIf support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"Internal Storage Bootloader (multiple images)\" sample configuration for more information.\nSee UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/tensorflow_model_profiler/readme.md"],"description":"This application profiles a ML model. The ML model is loaded as a byte array which is generated from a Tensorflow tflite model file. Profiling is performed by running one inference with the model.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.tensorflow_model_profiler.example/tensorflow_model_profiler/tensorflow_model_profiler.slcp","text":"Machine Learning - Model Profiler","priority":9999999,"category":"SOFTWARE","toolTipText":"This application profiles a ML model. The ML model is loaded as a byte array which is generated from a Tensorflow tflite model file. Profiling is performed by running one inference with the model.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/tflite_micro_hello_world/readme.md"],"description":"This application demonstrates a model trained to replicate a sine function.  The model is continuously fed with values ranging from 0 to 2pi, and the  output of the model is used to control the intensity of an LED.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.tflite_micro_hello_world.example/tflite_micro_hello_world/tflite_micro_hello_world.slcp","text":"Machine Learning - TensorFlow Lite Micro - Hello World","priority":9999999,"category":"SOFTWARE","toolTipText":"This application demonstrates a model trained to replicate a sine function.  The model is continuously fed with values ranging from 0 to 2pi, and the  output of the model is used to control the intensity of an LED. \n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project shows how to blink an LED in a bare-metal configuration.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.blink_baremetal.example/blink_baremetal/blink_baremetal.slcp","text":"Platform - Blink Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project shows how to blink an LED in a bare-metal configuration.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project shows how to blink an LED using a FreeRTOS kernel task. The blink task can be created using either dynamic or static memory allocation for the task stack and tcb.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.blink_kernel_freertos.example/blink_kernel_freertos/blink_kernel_freertos.slcp","text":"Platform - Blink Kernel FreeRTOS","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project shows how to blink an LED using a FreeRTOS kernel task. The blink task can be created using either dynamic or static memory allocation for the task stack and tcb.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project shows how to blink an LED using a Micrium OS kernel task.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.blink_kernel_micriumos.example/blink_kernel_micriumos/blink_kernel_micriumos.slcp","text":"Platform - Blink Kernel Micrium OS","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project shows how to blink an LED using a Micrium OS kernel task.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project uses the PWM driver that uses a TIMER to gradually adjust the intensity of an LED up and down.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.blink_pwm_baremetal.example/blink_pwm_baremetal/blink_pwm_baremetal.slcp","text":"Platform - Blink PWM","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project uses the PWM driver that uses a TIMER to gradually adjust the intensity of an LED up and down.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/cli_baremetal/readme.html"],"description":"This example project demonstrates how to use the CLI driver in a bare-metal configuration.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.cli_baremetal.example/cli_baremetal/cli_baremetal.slcp","text":"Platform - CLI Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates how to use the CLI driver in a bare-metal configuration.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/cli_kernel_freertos/readme.html"],"description":"This example project demonstrates how to use the CLI driver using a FreeRTOS Kernel.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.cli_kernel_freertos.example/cli_kernel_freertos/cli_kernel_freertos.slcp","text":"Platform - CLI Kernel FreeRTOS","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates how to use the CLI driver using a FreeRTOS Kernel.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/cli_kernel_micriumos/readme.html"],"description":"This example project demonstrates how to use the CLI driver using a Micrium OS Kernel.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.cli_kernel_micriumos.example/cli_kernel_micriumos/cli_kernel_micriumos.slcp","text":"Platform - CLI Kernel Micrium OS","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates how to use the CLI driver using a Micrium OS Kernel.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/dmadrv_baremetal/readme.html"],"description":"This example project shows how to use DMADRV driver to transfer data between memory and a USART peripheral in a bare-metal configuration.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.dmadrv_baremetal.example/dmadrv_baremetal/dmadrv_baremetal.slcp","text":"Platform - DMADRV Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project shows how to use DMADRV driver to transfer data between memory and a USART peripheral in a bare-metal configuration.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"Demo for energy mode current consumption testing.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.emode_baremetal.example/emode_baremetal/emode_baremetal.slcp","text":"Platform - Emode Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"Demo for energy mode current consumption testing.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project uses the I/O Stream service running in a bare-metal configuration  to demonstrate the use of EUSART communication over the virtual COM port (VCOM). The  application will echo back any characters it receives over the serial connection. The  VCOM serial port can be used either over USB or by connecting to port 4902 if the kit  is connected via Ethernet.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.iostream_eusart_baremetal.example/iostream_eusart_baremetal/iostream_eusart_baremetal.slcp","text":"Platform - I/O Stream EUSART Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project uses the I/O Stream service running in a bare-metal configuration  to demonstrate the use of EUSART communication over the virtual COM port (VCOM). The  application will echo back any characters it receives over the serial connection. The  VCOM serial port can be used either over USB or by connecting to port 4902 if the kit  is connected via Ethernet. \n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project uses the I/O Stream service running in a Micrium OS kernel task to demonstrate the use of EUSART communication over the virtual COM port (VCOM). The application will echo back any characters it receives over the serial connection. The VCOM serial port can be used either over USB or by connecting to port 4902 if the kit is connected via Ethernet.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.iostream_eusart_kernel_micriumos.example/iostream_eusart_kernel_micriumos/iostream_eusart_kernel_micriumos.slcp","text":"Platform - I/O Stream EUSART on Micrium OS kernel","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project uses the I/O Stream service running in a Micrium OS kernel task to demonstrate the use of EUSART communication over the virtual COM port (VCOM). The application will echo back any characters it receives over the serial connection. The VCOM serial port can be used either over USB or by connecting to port 4902 if the kit is connected via Ethernet. \n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project uses the I/O Stream service running in a bare-metal configuration  to demonstrate the use of UART communication over the virtual COM port (VCOM). The  application will echo back any characters it receives over the serial connection. The  VCOM serial port can be used either over USB or by connecting to port 4902 if the kit  is connected via Ethernet.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.iostream_usart_baremetal.example/iostream_usart_baremetal/iostream_usart_baremetal.slcp","text":"Platform - I/O Stream USART Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project uses the I/O Stream service running in a bare-metal configuration  to demonstrate the use of UART communication over the virtual COM port (VCOM). The  application will echo back any characters it receives over the serial connection. The  VCOM serial port can be used either over USB or by connecting to port 4902 if the kit  is connected via Ethernet. \n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project uses the I/O Stream service running in a Micrium OS kernel task to demonstrate the use of UART communication over the virtual COM port (VCOM). The application will echo back any characters it receives over the serial connection. The VCOM serial port can be used either over USB or by connecting to port 4902 if the kit is connected via Ethernet.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.iostream_usart_kernel_micriumos.example/iostream_usart_kernel_micriumos/iostream_usart_kernel_micriumos.slcp","text":"Platform - I/O Stream USART on Micrium OS kernel","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project uses the I/O Stream service running in a Micrium OS kernel task to demonstrate the use of UART communication over the virtual COM port (VCOM). The application will echo back any characters it receives over the serial connection. The VCOM serial port can be used either over USB or by connecting to port 4902 if the kit is connected via Ethernet. \n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/i2cspm_baremetal/readme.html"],"description":"This example project demonstrates how to use the I2C Simple Polled Master driver using the Si7021 Relative Humidity and Temperature Sensor in a bare-metal configuration.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.i2cspm_baremetal.example/i2cspm_baremetal/i2cspm_baremetal.slcp","text":"Platform - I2C Simple Polled Master Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates how to use the I2C Simple Polled Master driver using the Si7021 Relative Humidity and Temperature Sensor in a bare-metal configuration.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/i2cspm_kernel_freertos/readme.html"],"description":"This example project demonstrates how to use the I2C Simple Polled Master driver using the Si7021 Relative Humidity and Temperature Sensor in a FreeRTOS kernel task.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.i2cspm_kernel_freertos.example/i2cspm_kernel_freertos/i2cspm_kernel_freertos.slcp","text":"Platform - I2C Simple Polled Master on FreeRTOS Kernel","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates how to use the I2C Simple Polled Master driver using the Si7021 Relative Humidity and Temperature Sensor in a FreeRTOS kernel task.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/i2cspm_kernel_micriumos/readme.html"],"description":"This example project demonstrates how to use the I2C Simple Polled Master driver using the Si7021 Relative Humidity and Temperature Sensor in a Micrium OS kernel task.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.i2cspm_kernel_micriumos.example/i2cspm_kernel_micriumos/i2cspm_kernel_micriumos.slcp","text":"Platform - I2C Simple Polled Master on Micrium OS Kernel","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates how to use the I2C Simple Polled Master driver using the Si7021 Relative Humidity and Temperature Sensor in a Micrium OS kernel task.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/memlcd_baremetal/readme.html"],"description":"This example project demonstrates use of the Memory Liquid Crystal Display (LCD)  module in a baremetal application, using Silicon Labs Graphics Library (glib).","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.memlcd_baremetal.example/memlcd_baremetal/memlcd_baremetal.slcp","text":"Platform - MEMLCD Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates use of the Memory Liquid Crystal Display (LCD)  module in a baremetal application, using Silicon Labs Graphics Library (glib).\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/memlcd_kernel_micriumos/readme.html"],"description":"This example project demonstrates use of the Memory Liquid Crystal Display (LCD)  module in a Micrium OS kernel task, using Silicon Labs Graphics Library (glib).","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.memlcd_kernel_micriumos.example/memlcd_kernel_micriumos/memlcd_kernel_micriumos.slcp","text":"Platform - MEMLCD Kernel on Micrium OS kernel","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates use of the Memory Liquid Crystal Display (LCD)  module in a Micrium OS kernel task, using Silicon Labs Graphics Library (glib).\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project demonstrates the use of the Simple MPU module. Its purpose is to block the execution of code from RAM in order to prevent code injection attacks. In this example,  some fake malicious executable code is copied to RAM and executed with the MPU disabled and  re-enabled to demonstrate its effectiveness.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.mpu_simple_baremetal.example/mpu_simple_baremetal/mpu_simple_baremetal.slcp","text":"Platform - MPU Simple","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the use of the Simple MPU module. Its purpose is to block the execution of code from RAM in order to prevent code injection attacks. In this example,  some fake malicious executable code is copied to RAM and executed with the MPU disabled and  re-enabled to demonstrate its effectiveness. \n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project demonstrates use of the NVM3 interface. Using the command line interface, the user can write, read and delete NVM3 data objects through the serial connection. The number of writes and deletes are tracked in counter objects.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.nvm3_baremetal.example/nvm3_baremetal/nvm3_baremetal.slcp","text":"Platform - NVM3 Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates use of the NVM3 interface. Using the command line interface, the user can write, read and delete NVM3 data objects through the serial connection. The number of writes and deletes are tracked in counter objects.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/psa_crypto_aead/readme.html"],"description":"This example project demonstrates the Authenticated Encryption with Associated Data (AEAD) API.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.psa_crypto_aead.example/psa_crypto_aead/psa_crypto_aead.slcp","text":"Platform - PSA Crypto AEAD","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the Authenticated Encryption with Associated Data (AEAD) API.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/psa_crypto_asymmetric_key/readme.html"],"description":"This example project demonstrates the asymmetric key API.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.psa_crypto_asymmetric_key.example/psa_crypto_asymmetric_key/psa_crypto_asymmetric_key.slcp","text":"Platform - PSA Crypto Asymmetric Key","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the asymmetric key API.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/psa_crypto_cipher/readme.html"],"description":"This example project demonstrates the unauthenticated cipher API for generic and built-in AES-128 keys.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.psa_crypto_cipher.example/psa_crypto_cipher/psa_crypto_cipher.slcp","text":"Platform - PSA Crypto Cipher","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the unauthenticated cipher API for generic and built-in AES-128 keys.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/psa_crypto_dsa/readme.html"],"description":"This example project demonstrates the ECDSA and EdDSA digital signature API for generic and built-in ECC keys.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.psa_crypto_dsa.example/psa_crypto_dsa/psa_crypto_dsa.slcp","text":"Platform - PSA Crypto DSA","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the ECDSA and EdDSA digital signature API for generic and built-in ECC keys.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/psa_crypto_ecdh/readme.html"],"description":"This example project demonstrates the ECDH key agreement API.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.psa_crypto_ecdh.example/psa_crypto_ecdh/psa_crypto_ecdh.slcp","text":"Platform - PSA Crypto ECDH","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the ECDH key agreement API.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/psa_crypto_hash/readme.html"],"description":"This example project demonstrates the hash API.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.psa_crypto_hash.example/psa_crypto_hash/psa_crypto_hash.slcp","text":"Platform - PSA Crypto Hash","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the hash API.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/psa_crypto_kdf/readme.html"],"description":"This example project demonstrates the Key Derivation Function (KDF) API.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.psa_crypto_kdf.example/psa_crypto_kdf/psa_crypto_kdf.slcp","text":"Platform - PSA Crypto KDF","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the Key Derivation Function (KDF) API.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/psa_crypto_mac/readme.html"],"description":"This example project demonstrates the Message Authentication Code (MAC) API.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.psa_crypto_mac.example/psa_crypto_mac/psa_crypto_mac.slcp","text":"Platform - PSA Crypto MAC","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the Message Authentication Code (MAC) API.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/psa_crypto_symmetric_key/readme.html"],"description":"This example project demonstrates the symmetric key API.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.psa_crypto_symmetric_key.example/psa_crypto_symmetric_key/psa_crypto_symmetric_key.slcp","text":"Platform - PSA Crypto Symmetric Key","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the symmetric key API.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/psa_crypto_x509/readme.html"],"description":"This example project uses opaque ECDSA keys to implement the X.509 standard for certificates in Mbed TLS.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.psa_crypto_x509.example/psa_crypto_x509/psa_crypto_x509.slcp","text":"Platform - PSA Crypto X.509","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project uses opaque ECDSA keys to implement the X.509 standard for certificates in Mbed TLS.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/power_manager_baremetal/readme.html"],"description":"This example project demonstrates use of the Power Manager module in a bare metal application.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.power_manager_baremetal.example/power_manager_baremetal/power_manager_baremetal.slcp","text":"Platform - Power Manager Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates use of the Power Manager module in a bare metal application.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/power_manager_kernel_micriumos/readme.html"],"description":"This example project demonstrates use of the Power Manager module in a Micrium OS kernel task.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.power_manager_kernel_micriumos.example/power_manager_kernel_micriumos/power_manager_kernel_micriumos.slcp","text":"Platform - Power Manager Kernel with Micrium OS","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates use of the Power Manager module in a Micrium OS kernel task.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_asymmetric_key_handling/readme.html"],"description":"This example project demonstrates the asymmetric key handling API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_asymmetric_key_handling.example/se_manager_asymmetric_key_handling/se_manager_asymmetric_key_handling.slcp","text":"Platform - SE Manager Asymmetric Key Handling","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the asymmetric key handling API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_attestation/readme.html"],"description":"This example project demonstrates how to get attestation tokens using the SE Manager Attestation API and printing them in a human-readable format.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_attestation.example/se_manager_attestation/se_manager_attestation.slcp","text":"Platform - SE Manager Attestation","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates how to get attestation tokens using the SE Manager Attestation API and printing them in a human-readable format.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_block_cipher/readme.html"],"description":"This example project demonstrates the block cipher API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_block_cipher.example/se_manager_block_cipher/se_manager_block_cipher.slcp","text":"Platform - SE Manager Block Cipher","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the block cipher API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_signature/readme.html"],"description":"This example project demonstrates the digital signature (ECDSA and EdDSA) API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_signature.example/se_manager_signature/se_manager_signature.slcp","text":"Platform - SE Manager Digital Signature (ECDSA and EdDSA)","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the digital signature (ECDSA and EdDSA) API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_hash/readme.html"],"description":"This example project demonstrates the Hash API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_hash.example/se_manager_hash/se_manager_hash.slcp","text":"Platform - SE Manager Hash","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the Hash API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_host_firmware_upgrade/readme.html"],"description":"This example project demonstrates the host firmware upgrade and debug lock API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_host_firmware_upgrade.example/se_manager_host_firmware_upgrade/se_manager_host_firmware_upgrade.slcp","text":"Platform - SE Manager Host Firmware Upgrade and Debug Lock","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the host firmware upgrade and debug lock API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_ecdh/readme.html"],"description":"This example project demonstrates the key agreement (ECDH) API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_ecdh.example/se_manager_ecdh/se_manager_ecdh.slcp","text":"Platform - SE Manager Key Agreement (ECDH)","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the key agreement (ECDH) API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_ecjpake/readme.html"],"description":"This example project demonstrates the key agreement (ECJPAKE) API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_ecjpake.example/se_manager_ecjpake/se_manager_ecjpake.slcp","text":"Platform - SE Manager Key Agreement (ECJPAKE)","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the key agreement (ECJPAKE) API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_kdf/readme.html"],"description":"This example project demonstrates the key derivation (HKDF and PBKDF2) API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_kdf.example/se_manager_kdf/se_manager_kdf.slcp","text":"Platform - SE Manager Key Derivation (HKDF and PBKDF2)","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the key derivation (HKDF and PBKDF2) API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_key_provisioning/readme.html"],"description":"This example project demonstrates the key provisioning API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_key_provisioning.example/se_manager_key_provisioning/se_manager_key_provisioning.slcp","text":"Platform - SE Manager Key Provisioning","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the key provisioning API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_se_firmware_upgrade/readme.html"],"description":"This example project demonstrates the SE firmware upgrade API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_se_firmware_upgrade.example/se_manager_se_firmware_upgrade/se_manager_se_firmware_upgrade.slcp","text":"Platform - SE Manager SE Firmware Upgrade","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the SE firmware upgrade API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_secure_debug/readme.html"],"description":"This example project demonstrates the secure debug API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_secure_debug.example/se_manager_secure_debug/se_manager_secure_debug.slcp","text":"Platform - SE Manager Secure Debug","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the secure debug API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_secure_identity/readme.html"],"description":"This example project demonstrates the secure identity of Secure Vault High device.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_secure_identity.example/se_manager_secure_identity/se_manager_secure_identity.slcp","text":"Platform - SE Manager Secure Identity","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the secure identity of Secure Vault High device.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_stream_cipher/readme.html"],"description":"This example project demonstrates the stream cipher API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_stream_cipher.example/se_manager_stream_cipher/se_manager_stream_cipher.slcp","text":"Platform - SE Manager Stream Cipher","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the stream cipher API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_symmetric_key_handling/readme.html"],"description":"This example project demonstrates the symmetric key handling API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_symmetric_key_handling.example/se_manager_symmetric_key_handling/se_manager_symmetric_key_handling.slcp","text":"Platform - SE Manager Symmetric Key Handling","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the symmetric key handling API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_tamper/readme.html"],"description":"This example project demonstrates the tamper feature of Secure Vault High device.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_tamper.example/se_manager_tamper/se_manager_tamper.slcp","text":"Platform - SE Manager Tamper","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the tamper feature of Secure Vault High device.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/se_manager_user_data/readme.html"],"description":"This example project demonstrates the user data API of SE Manager.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.se_manager_user_data.example/se_manager_user_data/se_manager_user_data.slcp","text":"Platform - SE Manager User Data","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the user data API of SE Manager.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/spidrv_master_baremetal/readme.html"],"description":"This example project demonstrates how to use the master mode of the Serial Peripheral Interface driver in a bare-metal configuration.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.spidrv_master_baremetal.example/spidrv_master_baremetal/spidrv_master_baremetal.slcp","text":"Platform - SPIDRV Master Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates how to use the master mode of the Serial Peripheral Interface driver in a bare-metal configuration.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/spidrv_master_kernel_micriumos/readme.html"],"description":"This example project demonstrates how to use the master mode of the Serial Peripheral Interface driver in a Micrium OS kernel task.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.spidrv_master_kernel_micriumos.example/spidrv_master_kernel_micriumos/spidrv_master_kernel_micriumos.slcp","text":"Platform - SPIDRV Master on Micrium OS kernel","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates how to use the master mode of the Serial Peripheral Interface driver in a Micrium OS kernel task.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/spidrv_slave_baremetal/readme.html"],"description":"This example project demonstrates how to use the slave mode of the Serial Peripheral Interface driver in a bare-metal configuration.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.spidrv_slave_baremetal.example/spidrv_slave_baremetal/spidrv_slave_baremetal.slcp","text":"Platform - SPIDRV Slave Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates how to use the slave mode of the Serial Peripheral Interface driver in a bare-metal configuration.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/spidrv_slave_kernel_micriumos/readme.html"],"description":"This example project demonstrates how to use the slave mode of the Serial Peripheral Interface driver in a Micrium OS kernel task.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.spidrv_slave_kernel_micriumos.example/spidrv_slave_kernel_micriumos/spidrv_slave_kernel_micriumos.slcp","text":"Platform - SPIDRV Slave on Micrium OS kernel","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates how to use the slave mode of the Serial Peripheral Interface driver in a Micrium OS kernel task.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/dci_swd_programming/readme.html"],"description":"This example project demonstrates the DCI and SWD Programming on Series 2 devices.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.dci_swd_programming.example/dci_swd_programming/dci_swd_programming.slcp","text":"Platform - Series 2 DCI and SWD Programming","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the DCI and SWD Programming on Series 2 devices.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project shows how to toggle LEDs using buttons in a bare-metal environment.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.simple_button_baremetal.example/simple_button_baremetal/simple_button_baremetal.slcp","text":"Platform - Simple Button Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project shows how to toggle LEDs using buttons in a bare-metal environment.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project shows how to toggle LEDs using buttons in a Micrium OS kernel task.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.simple_button_kernel_micriumos.example/simple_button_kernel_micriumos/simple_button_kernel_micriumos.slcp","text":"Platform - Simple Button on Micrium OS kernel","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project shows how to toggle LEDs using buttons in a Micrium OS kernel task.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project demonstrates periodic and one-shot timers using the low-frequency real-time clock peripheral. Timers can be stopped and restarted using the buttons. Timer status is reported on the virtual COM serial port.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.sleeptimer_baremetal.example/sleeptimer_baremetal/sleeptimer_baremetal.slcp","text":"Platform - Sleeptimer Bare-metal","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates periodic and one-shot timers using the low-frequency real-time clock peripheral. Timers can be stopped and restarted using the buttons. Timer status is reported on the virtual COM serial port.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example project demonstrates the wallclock interface of the sleeptimer service. The user can get and set the date and time in different formats through the VCOM serial port.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.sleeptimer_wallclock_baremetal.example/sleeptimer_wallclock_baremetal/sleeptimer_wallclock_baremetal.slcp","text":"Platform - Sleeptimer Wallclock","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates the wallclock interface of the sleeptimer service. The user can get and set the date and time in different formats through the VCOM serial port.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":["file:/C:/Users/█████████/SimplicityStudio/SDKs/gecko_sdk/app/common/example/tempdrv_kernel_micriumos/readme.html"],"description":"This example project demonstrates how to use the internal temperature sensor in a Micrium OS kernel task.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.tempdrv_kernel_micriumos.example/tempdrv_kernel_micriumos/tempdrv_kernel_micriumos.slcp","text":"Platform - TEMPDRV on Micrium OS kernel","priority":9999999,"category":"SOFTWARE","toolTipText":"This example project demonstrates how to use the internal temperature sensor in a Micrium OS kernel task.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"mbedTLS AES example using hardware accelerators to accelerate the AES encryption and SHA hash functions of mbedTLS.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.mbedtls_aescrypt.example/mbedtls_aescrypt/mbedtls_aescrypt.slcp","text":"Platform - mbedTLS AES","priority":9999999,"category":"SOFTWARE","toolTipText":"mbedTLS AES example using hardware accelerators to accelerate the AES encryption and SHA hash functions of mbedTLS.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example uses hardware accelerators of the supported devices to perform ECDH key generation with mbedTLS.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.mbedtls_ecdh.example/mbedtls_ecdh/mbedtls_ecdh.slcp","text":"Platform - mbedTLS ECDH","priority":9999999,"category":"SOFTWARE","toolTipText":"This example uses hardware accelerators of the supported devices to perform ECDH key generation with mbedTLS.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This example uses hardware accelerators on the supported device to perform ECDSA digital signaturewith mbedTLS.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.mbedtls_ecdsa.example/mbedtls_ecdsa/mbedtls_ecdsa.slcp","text":"Platform - mbedTLS ECDSA","priority":9999999,"category":"SOFTWARE","toolTipText":"This example uses hardware accelerators on the supported device to perform ECDSA digital signaturewith mbedTLS.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This sample configuration of the Gecko bootloader configures the bootloader to use an external SPI flash to store firmware update images. The storage configuration is set up to store up to two firmware update images at a time, in two storage slots. The storage slots are configured to start at address 0x2000 and 0x41000 of the SPI flash respectively, and have a size of 252 kB. This can be configured on the \"Storage\" tab. The \"bootload info\" meta-information, which tells the bootloader which storage slot to install the next firmware update from, is configured under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\" to be placed at address 0x0. The first storage slot is configured to start at address 0x2000 (8 kB) because the bootload info takes up 2 flash pages of 4 kB. See UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-storage-spiflash.sample-apps/bootloader-storage-spiflash/bootloader-storage-spiflash.slcp","text":"SPI Flash Storage Bootloader (multiple images)","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample configuration of the Gecko bootloader configures the bootloader to use an external SPI flash to store firmware update images. The storage configuration is set up to store up to two firmware update images at a time, in two storage slots. The storage slots are configured to start at address 0x2000 and 0x41000 of the SPI flash respectively, and have a size of 252 kB. This can be configured on the \"Storage\" tab.\nThe \"bootload info\" meta-information, which tells the bootloader which storage slot to install the next firmware update from, is configured under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\" to be placed at address 0x0. The first storage slot is configured to start at address 0x2000 (8 kB) because the bootload info takes up 2 flash pages of 4 kB.\nSee UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This sample configuration of the Gecko bootloader configures the bootloader to use an external SPI flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x0 of the SPI flash, and have a size of 1024 kB. This can be configured on the \"Storage\" tab. This sample configuration works out-of-the-box with the default sample configuration of the Zigbee OTA Client in EmberZNet sample apps. Note: If support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"SPI Flash Storage Bootloader (multiple images)\" sample configuration for more information. See UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc. Note: Please ensure that the external SPI Flash connected to the SoC is of size >= 1MB. This application needs an external SPI Flash of minimum size 1MB","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-storage-spiflash-single-1024k.sample-apps/bootloader-storage-spiflash-single-1024k/bootloader-storage-spiflash-single-1024k.slcp","text":"SPI Flash Storage Bootloader (single image with slot size of 1024k)","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample configuration of the Gecko bootloader configures the bootloader to use an external SPI flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x0 of the SPI flash, and have a size of 1024 kB. This can be configured on the \"Storage\" tab.\nThis sample configuration works out-of-the-box with the default sample configuration of the Zigbee OTA Client in EmberZNet sample apps.\nNote: If support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"SPI Flash Storage Bootloader (multiple images)\" sample configuration for more information.\nSee UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.\nNote: Please ensure that the external SPI Flash connected to the SoC is of size >= 1MB. This application needs an external SPI Flash of minimum size 1MB\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"This sample configuration of the Gecko bootloader configures the bootloader to use an external SPI flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x0 of the SPI flash, and have a size of 512 kB. This can be configured on the \"Storage\" tab. This sample configuration works out-of-the-box with the default sample configuration of the Zigbee OTA Client in EmberZNet sample apps. Note: If support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"SPI Flash Storage Bootloader (multiple images)\" sample configuration for more information. See UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-storage-spiflash-single.sample-apps/bootloader-storage-spiflash-single/bootloader-storage-spiflash-single.slcp","text":"SPI Flash Storage Bootloader (single image)","priority":9999999,"category":"SOFTWARE","toolTipText":"This sample configuration of the Gecko bootloader configures the bootloader to use an external SPI flash to store firmware update images. The storage configuration is set up to store a single firmware update image at a time, in a single storage slot. The storage slot is configured to start at address 0x0 of the SPI flash, and have a size of 512 kB. This can be configured on the \"Storage\" tab.\nThis sample configuration works out-of-the-box with the default sample configuration of the Zigbee OTA Client in EmberZNet sample apps.\nNote: If support for multiple storage slots is desired, the start address of the storage, configurable under \"Software Components->Platform->Bootloader->Storage->Bootloader Storage Slot Setup\", *must* be configured to provide the location for \"bootload info\", which is meta-information about the storage slots to tell the bootloader which storage slot to install the next firmware update from. See the \"SPI Flash Storage Bootloader (multiple images)\" sample configuration for more information.\nSee UG489: Gecko Bootloader User's Guide to learn more about how to configure the bootloader, configure storage layout, enable security features, etc.\n"},{"imageURL":"bundleentry://717.fwk2111542452/icons/projectNew.svg","supportDocuments":[],"description":"Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks.","id":"template.uc.com.silabs.sdk.stack.super:4.0.2._1224998501.bootloader-uart-xmodem.sample-apps/bootloader-uart-xmodem/bootloader-uart-xmodem.slcp","text":"UART XMODEM Bootloader","priority":9999999,"category":"SOFTWARE","toolTipText":"Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet and Connect protocol stacks.\n"}],"filters":[{"futureCount":0,"anySelected":false,"id":0,"filters":[{"futureCount":104,"anySelected":false,"id":0,"filters":[],"title":"Gecko SDK Suite v4.0.2","parentId":0,"selected":false}],"title":"Provider","parentId":-1,"selected":false},{"futureCount":0,"anySelected":false,"id":1,"filters":[{"futureCount":1,"anySelected":false,"id":0,"filters":[],"title":"ALPHA","parentId":1,"selected":false},{"futureCount":2,"anySelected":false,"id":1,"filters":[],"title":"None Specified","parentId":1,"selected":false},{"futureCount":101,"anySelected":false,"id":2,"filters":[],"title":"PRODUCTION","parentId":1,"selected":false}],"title":"Quality","parentId":-1,"selected":false}],"totalCount":104}
